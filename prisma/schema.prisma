// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Player {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  scorecards Scorecard[]
}

model Course {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  numHoles   Int
  scorecards Scorecard[]
}

model Scorecard {
  id         Int         @id @default(autoincrement())
  score      Int
  createdAt  DateTime    @default(now())
  course     Course      @relation(fields: [courseId], references: [id])
  courseName String
  courseId   Int
  player     Player      @relation(fields: [playerId], references: [id])
  playerId   Int
  HoleScore  HoleScore[]
}

model HoleScore {
  id          Int       @id @default(autoincrement())
  holeNumber  Int
  score       Int
  scorecard   Scorecard @relation(fields: [scorecardId], references: [id])
  scorecardId Int
}

model WhitelistedEmail {
  id    Int    @id @default(autoincrement())
  email String @unique
}
